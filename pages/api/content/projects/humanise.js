// pages/api/content/projects/humanise.js

import pool from '../../../../lib/db'; // Ensure the correct path to your DB connection
import OpenAI from 'openai';

// Initialize OpenAI configuration with v4 SDK
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Ensure this is set in your environment variables
  // organization: process.env.OPENAI_ORG_ID, // Optional: Set if you have an organization ID
  // project: 'your-project-id', // Optional: Set if you're using project keys
});

// Function to preserve code blocks and HTML tags
const preserveFormatting = (text) => {
  // Regular expression to match <code>...</code> blocks and other HTML tags
  const regex = /<code>[\s\S]*?<\/code>|<[^>]+>/gi;
  const segments = [];
  let lastIndex = 0;

  let match;
  while ((match = regex.exec(text)) !== null) {
    // Add the text before the match as a segment to be humanized
    if (match.index > lastIndex) {
      segments.push({
        type: 'text',
        content: text.substring(lastIndex, match.index),
      });
    }

    // Add the matched HTML tag or code block as a segment to be preserved
    segments.push({
      type: 'preserve',
      content: match[0],
    });

    lastIndex = regex.lastIndex;
  }

  // Add any remaining text after the last match
  if (lastIndex < text.length) {
    segments.push({
      type: 'text',
      content: text.substring(lastIndex),
    });
  }

  return segments;
};

// Function to humanize text using OpenAI's GPT
const humanizeText = async (text) => {
  // Define the enhanced prompt to instruct GPT for paraphrasing
  const prompt = `
You are a professional content editor. Your task is to analyse the content provided below and edit it according to the following instructions.

Here is the content of a landing page: 
"${text}"

Enhance this content by replacing any instances of the following words and phrases with simpler, more accessible alternatives:

Additionally: also, besides, furthermore
As an AI language model: as an AI system, as an AI program, as an AI tool
As well as: and, along with, in addition to
Beacon: guide, signal, light
Boost: increase, enhance, improve
By the same token: likewise, similarly, in the same way
Comparatively: relatively, somewhat, to some extent
Comprehensive: thorough, complete, extensive
Correspondingly: similarly, likewise, in the same way
Delve: explore, investigate, examine
Demystifying: clarifying, explaining, simplifying
Dive: explore, investigate, examine
Elevate: raise, lift, improve
Embark: begin, start, commence
Embrace: accept, adopt, welcome
Enhance: improve, augment, boost
Equally important: also important, just as important, of equal importance
Ever-evolving: constantly changing, continually developing, always evolving
Explore: examine, investigate, study
Furthermore: moreover, in addition, also
Generated by AI: created by AI, produced by AI, developed by AI
Identically: similarly, in the same way, likewise
In addition: also, furthermore, moreover
In conclusion: to conclude, in summary, finally
In light of: considering, given, because of
In this digital landscape: in today's digital world, in the current digital environment, in the modern digital age
It is important/crucial/essential: it is vital, it is necessary, it is key
Key takeaways: main points, important insights, essential information
Leverage: use, utilize, employ
Likewise: similarly, in the same way, also
Look no further: this is the solution, here it is, you've found it
Maximize: increase, enhance, make the most of
Moreover: furthermore, in addition, also
Navigating: managing, handling, dealing with
Not to mention: additionally, furthermore, also
Overall: generally, in general, on the whole
Picture this: imagine this, envision this, consider this
Plethora: abundance, many, numerous
Remember that: keep in mind, don't forget, note that
Secondly: next, also, in addition
Shed light: clarify, explain, illuminate
Similarly: likewise, in the same way, also
Solace: comfort, relief, consolation
Switching gears: changing topics, moving on, on another note
The ultimate guide: the complete guide, the definitive guide, the comprehensive guide
This innovative solution: this new solution, this creative solution, this novel solution
To say nothing of: not to mention, besides, additionally
Todayâ€™s digital world: the modern digital world, the current digital age, today's digital environment
Top-notch: excellent, high-quality, outstanding
Treasure trove: abundance, wealth, rich source
Uniquely: distinctively, exceptionally, particularly
Unleash: release, set free, let loose
Unlock: open, reveal, access
Various: different, several, multiple
We've got you covered: we can help you, we've taken care of it, we have it handled
When it comes to: regarding, concerning, in terms of
Whilst: while, although, whereas
Whimsical: playful, fanciful, quirky
Target Audience: Residential, commercial, and industrial customers. Brand Voice: Professional, trustworthy, and empathetic. SEO Keywords: (Primary: electrical contractor melbourne; Secondary: emergency electricians melbourne, electricians melbourne cbd) (Do not alter these keywords). Brand Name: Daynight Electrical (Do not alter this name).

Additional Enhancements to Apply:

Active Voice: Convert passive constructions to active voice for better readability.
Formatting: Use headings (H1, H2), bullet points, and other formatting tools to improve clarity and engagement.
Expression Correction: Fix awkward or unnatural expressions.
Simplification: Simplify complex sentences and replace less common words with more familiar alternatives.
SEO Integration: Integrate the provided SEO keywords and location naturally without compromising readability or altering them.
Selection of words: When you replace or readjust words, please use words that's commonly been used by humans on social media but make sure it reads professional.
 
No Internal Commentary: Do not include any internal instructions, reasoning, or commentary in the final output. Ensure the content is complete and ready to use; avoid statements like 'Rest of content follows the same pattern of natural, conversational tone.' Do not remove any paragraphs or reduce the length of the content.
`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4', // Use 'gpt-4' or any available model
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.8, // Increased for more creativity and variation
      max_tokens: 1500, // Adjust based on your needs and API limits
      top_p: 0.9, // Increased for greater diversity
      frequency_penalty: 0.2, // Slight penalty to reduce repetition
      presence_penalty: 0.2, // Encourages introducing new topics
    });

    const humanizedText = response.choices[0].message.content.trim();
    return humanizedText;
  } catch (error) {
    console.error('OpenAI API error:', error.response ? error.response.data : error.message);
    throw new Error('Failed to humanize content using OpenAI.');
  }
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ error: `Method ${req.method} not allowed` });
  }

  const { content, entry_id } = req.body;

  // Validate input
  if (!content || typeof content !== 'string') {
    return res.status(400).json({ error: 'Invalid or missing content' });
  }

  if (!entry_id) {
    return res.status(400).json({ error: 'entry_id is required' });
  }

  try {
    // Preserve formatting by separating text and preserved segments
    const segments = preserveFormatting(content);

    // Humanize only the text segments
    const humanizedSegments = await Promise.all(
      segments.map(async (segment) => {
        if (segment.type === 'text') {
          const humanizedText = await humanizeText(segment.content);
          return humanizedText;
        } else {
          // Preserve HTML tags and code blocks as is
          return segment.content;
        }
      })
    );

    // Reconstruct the humanized content
    const humanizedContent = humanizedSegments.join('');

    // Update the database with the humanized content
    const sql = 'UPDATE entries SET humanized_content = ? WHERE entry_id = ?';
    const values = [humanizedContent, entry_id];

    const [result] = await pool.query(sql, values);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Entry not found' });
    }

    res.status(200).json({ status: 'success', humanizedContent: humanizedContent });
  } catch (error) {
    console.error('Error processing humanized content:', error);

    // Handle specific OpenAI API errors
    if (error.response) {
      console.error('OpenAI API error:', error.response.status, error.response.data);
      return res.status(error.response.status).json({ error: error.response.data.error || 'OpenAI API error' });
    }

    res.status(500).json({ error: 'An error occurred while processing the content' });
  }
}
